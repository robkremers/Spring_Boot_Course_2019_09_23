Topic: Specifics regarding the exercises whenever useful.
Date : 2019-12-09.

The exercises have been implemented in Eclipse.

General notes:
- Java jdk 1.8 has been used.
- For each project:
	- Properties| Java Build Path| Libraries:
		- Exchange the standard Java library for JavaSE-1.8.
	- pom.xml:
		- maven-compiler-plugin:
			- configuration:
				- source: 1.8
				- target: 1.8
		- log4j:
			- Version: 1.2.14 --> 1.2.47
			- Reason: the downloaded 1.2.114 library was bad.

---------------------------------------------------------------------------------------------------
2019-12-09:

Exercise1: Dependency injection with XML.

	This is a basic classic spring application, using configuration xml files like it was done before annotations started to be used.
	However even today many Java Spring applications use configuration xml files.

	Note that in the situation of constructor Dependency Injection a default constructor needs to be added.
	Otherwise the application will not compile.

Exercise2: Dependency injection with classpath scanning and autowiring.

	In the configuration xml file is only present:

	     <context:annotation-config/>
	     <context:component-scan base-package="customers"/>

	Autowiring constructors and setters is shown using @Component, @Service, @Autowired.

Exercise3: Dependency injection with Java Config.

	Method: 
	- Create a @Configuration class: class AppConfig.java
	- Define @Beans in the @Configuration class.
		- The @Bean methods can use setters / constructors for wiring or alternatively @Autowired can be used.

Exercise4: Dependency injection with Java Config + classpath scanning + autowiring

	Method:
	- Create a class AppConfig.java
		- Use @Configuration and @ComponentScan.
	- The bean classes are defined using (in this case) @Service.
	- Use @Autowired to autowire the wire the classes together.

Exercise5: Spring Boot application

	Method:
	- @SpringBootApplication
	- The main class implements CommandLineRunner; no need to create the context myself.
		- In this way also the wiring is automatically recognized.
	- Use the standard application.properties file to define properties.
		- For this situation @PropertySource is not necessary.

Exercise6 Spring Boot AOP

	AOP Functionality:
	- Classes LogAdvice, StopwatchAdvice

Exercise 7 – Bank Application AOP

Exercise8 - Spring JDBC

Connection with HSQL database:
- Setting Name	: trainingdb
- type 			: HSQL Database Engine Standalone
- Driver		: org.hsqldb.jdbcDriver
- URL			: jdbs:hsqldb:hsql://localhost/trainingdb
- User			: sa
- Password		: <empty>

A HSQL Database Manager screen will open (see instructions).

If a database schema is no longer required: DROP SCHEMA PUBLIC CASCADE; <Execute SQL>

In order to make the initial code run:

Execute in the HSQL Database Manager screen:

CREATE TABLE product (
number INTEGER PRIMARY KEY,
name VARCHAR(50),
price DECIMAL(8,2)
);

For the exercise:

CREATE TABLE customer (
id INTEGER PRIMARY KEY,
name VARCHAR(50),
email VARCHAR(50)
);

Exercise 9 – Basic Spring data JPA

When implementing a Spring Boot JPA CRUD repository, in this case:

	public interface BookRepository extends JpaRepository<Book, Long> {
		..
	}

Use ctrl + space when typing the method titles if the methods are built according to the properties of the underlying class. This will show you the options.

When implementing an entity (Book, Customer) often an id is used as primary key.
Implement this as follows:

@Entity
public class Book {

	@Id
	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="BOOK_SEQ")
	private long id;
	private String title;
	private String ISBN;
	private String author;
	private double price;

	..
}

In this way each entity will have it's own sequence from which the values for the primary key are generated.
Otherwise the values for Book.id, Customer.id, etc. will all be generated from the same sequence!


Exercise 10 – Bank Application with Spring Data JPA

In case of JPA if an entity class has a custom constructor a default constructor should be implemented explicitly.


Exercise 12 – Transactions with Spring Data JPA

Note the use of @Transactional in the TraceRecordRepository!
Als note that in order to make TraceRecord work in case of an exception Propagation.REQUIRES_NEW is necessary.

'default void storeTraceRecord' is the solution offered by the trainer, but the first solution also works. 

public interface TraceRecordRepository extends JpaRepository<TraceRecord, Long> {
	
  @SuppressWarnings("unchecked")
  @Transactional(propagation=Propagation.REQUIRES_NEW)
  TraceRecord save(TraceRecord traceRecord);
  
  @Transactional(propagation=Propagation.REQUIRES_NEW)
  default void storeTraceRecord(TraceRecord traceRecord) {
	  this.save(traceRecord);
  }

}


Exercise 13 a: Spring JMS

In C:\Java\2019_09_23_VijfhartIT_Java_SpringBoot\springtraining\apache-activemq-5.15.3\bin\activemq.bat I have redefined ACTIVEMQ_HOME:

REM set ACTIVEMQ_HOME=C:\springtraining\apache-activemq-5.15.3
set ACTIVEMQ_HOME=C:\Java\2019_09_23_VijfhartIT_Java_SpringBoot\springtraining\apache-activemq-5.15.3


Exercise 13 b. –JMS for the Bank Application


Exercise 13 c. –Kafka

Before starting the Kafka server the following needs to be done:
Place Kafka in C:\springtraining.
Not in C:\Java\2019_09_23_VijfhartIT_Java_SpringBoot\springtraining\
Reason: the string containing the directory would become too long :-(

Starting up Kafka from the commandline (don't doubleclick: for some reason it does not work):
- C:\springtraining\kafka_2.11-1.1.0\
	- Execute startzookeeper.bat
	- Execute startkafka.bat

- Before starting it can be neceessary to clear the logs:
	- C:\springtraining\kafka_2.11-1.1.0\springtrainingkafka_2.11-1.1.0kafkalogs
	- C:\springtraining\kafka_2.11-1.1.0\springtrainingkafka_2.11-1.1.0zookeeperdata
	* The logging can apparently cause unexpected errors and shutdown due to previous ungraceful shutdown.


---------------------------------------------------------------------------------------------------
2020-01-04:

Start from scratch with Kafka.
Try to get it running at all with a small example.


https://towardsdatascience.com/running-zookeeper-kafka-on-windows-10-14fc70dcc771
- Install Zookeeper (use this directory!!!):
	- C:\Apache\apache-zookeeper-3.5.6-bin
		- C:\Apache\apache-zookeeper-3.5.6-bin\conf\zoo.cfg
			- dataDir=../logs
	- Set ZOOKEEPER_HOME:
		C:\Apache\apache-zookeeper-3.5.6-bin>echo %ZOOKEEPER_HOME%
		C:\Apache\apache-zookeeper-3.5.6-bin
	- Start Zookeeper Server:
		- Go to the bin directory:
			> zkserver <enter>
- Install Kafka.
	- C:\Apache\kafka_2.12-2.4.0
	- Go to C:\Apache\kafka_2.12-2.4.0\config
		- zookeeper.properties
			- dataDir=../zookeeper
		- server.properties
			- roker.id=0 # No changes.
	- Go to C:\Apache\kafka_2.12-2.4.0\bin\windows
		- kafka-server-start.bat C:\Apache\kafka_2.12-2.4.0\config\server.properties

[2020-01-06 22:17:22,604] ERROR Fatal error during KafkaServer startup. Prepare to shutdown (kafka.server.KafkaServer)
kafka.common.InconsistentClusterIdException: The Cluster ID AsisBmvDQ1esD9VL4X1vwg doesn't match stored clusterId Some(Rd4PfdkaQjWGTBt6XgLdcA) in meta.properties. The broker is trying to join the wrong cluster. Configured zookeeper.connect may be wrong.

kafka.common.InconsistentClusterIdException: The Cluster ID doesn't match stored clusterId Some() in meta.properties. The broker is trying to join the wrong cluster. Configured zookeeper.connect may be wrong.

Remedy:
- Remove C:\Apache\kafka_2.12-2.4.0\bin\windows\Apachekafka_2.12-2.4.0kafka-logs

After this Kafka can be restarted successfully.

Note:
If the above mentioned setup is changed it might easily go wrong.
Apparently Kafka is not really meant to be executed in Windows.

In a Spring Boot application:
- add to the pom.xml:

        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-streams</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>

- add to src/main/resources/application.properties:
	# some port number
	server.port = 9090


Example:
- Spring Boot with Spring Kafka Producer Example | Tech Primers
	- https://www.youtube.com/watch?v=NjHYWEV_E_o
- Spring Boot with Spring Kafka Consumer Example | Tech Primers
	- https://www.youtube.com/watch?v=IncG0_XSSBg

- TheDeveloperGuy: Creating a Kafka Producer with Spring Boot
	- https://www.youtube.com/watch?v=azPVFi8FkBU
	- 2019-05-21

See you next time :-)