Topic: Specifics regarding the exercises whenever useful.
Date : 2019-12-09.

The exercises have been implemented in Eclipse.

General notes:
- Java jdk 1.8 has been used.
- For each project:
	- Properties| Java Build Path| Libraries:
		- Exchange the standard Java library for JavaSE-1.8.
	- pom.xml:
		- maven-compiler-plugin:
			- configuration:
				- source: 1.8
				- target: 1.8
		- log4j:
			- Version: 1.2.14 --> 1.2.47
			- Reason: the downloaded 1.2.114 library was bad.

---------------------------------------------------------------------------------------------------
2019-12-09:

Exercise1: Dependency injection with XML.

	This is a basic classic spring application, using configuration xml files like it was done before annotations started to be used.
	However even today many Java Spring applications use configuration xml files.

	Note that in the situation of constructor Dependency Injection a default constructor needs to be added.
	Otherwise the application will not compile.

Exercise2: Dependency injection with classpath scanning and autowiring.

	In the configuration xml file is only present:

	     <context:annotation-config/>
	     <context:component-scan base-package="customers"/>

	Autowiring constructors and setters is shown using @Component, @Service, @Autowired.

Exercise3: Dependency injection with Java Config.

	Method: 
	- Create a @Configuration class: class AppConfig.java
	- Define @Beans in the @Configuration class.
		- The @Bean methods can use setters / constructors for wiring or alternatively @Autowired can be used.

Exercise4: Dependency injection with Java Config + classpath scanning + autowiring

	Method:
	- Create a class AppConfig.java
		- Use @Configuration and @ComponentScan.
	- The bean classes are defined using (in this case) @Service.
	- Use @Autowired to autowire the wire the classes together.

Exercise5: Spring Boot application

	Method:
	- @SpringBootApplication
	- The main class implements CommandLineRunner; no need to create the context myself.
		- In this way also the wiring is automatically recognized.
	- Use the standard application.properties file to define properties.
		- For this situation @PropertySource is not necessary.

Exercise6 Spring Boot AOP

	AOP Functionality:
	- Classes LogAdvice, StopwatchAdvice

Exercise 7 – Bank Application AOP

Exercise8 - Spring JDBC

Connection with HSQL database:
- Setting Name	: trainingdb
- type 			: HSQL Database Engine Standalone
- Driver		: org.hsqldb.jdbcDriver
- URL			: jdbs:hsqldb:hsql://localhost/trainingdb
- User			: sa
- Password		: <empty>

A HSQL Database Manager screen will open (see instructions).

If a database schema is no longer required: DROP SCHEMA PUBLIC CASCADE; <Execute SQL>

In order to make the initial code run:

Execute in the HSQL Database Manager screen:

CREATE TABLE product (
number INTEGER PRIMARY KEY,
name VARCHAR(50),
price DECIMAL(8,2)
);

For the exercise:

CREATE TABLE customer (
id INTEGER PRIMARY KEY,
name VARCHAR(50),
email VARCHAR(50)
);

Exercise 9 – Basic Spring data JPA

When implementing a Spring Boot JPA CRUD repository, in this case:

	public interface BookRepository extends JpaRepository<Book, Long> {
		..
	}

Use ctrl + space when typing the method titles if the methods are built according to the properties of the underlying class. This will show you the options.

When implementing an entity (Book, Customer) often an id is used as primary key.
Implement this as follows:

@Entity
public class Book {

	@Id
	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="BOOK_SEQ")
	private long id;
	private String title;
	private String ISBN;
	private String author;
	private double price;

	..
}

In this way each entity will have it's own sequence from which the values for the primary key are generated.
Otherwise the values for Book.id, Customer.id, etc. will all be generated from the same sequence!


Exercise 10 – Bank Application with Spring Data JPA

In case of JPA if an entity class has a custom constructor a default constructor should be implemented explicitly.


Exercise 12 – Transactions with Spring Data JPA

